// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\x12\x0b\xec\xa1\x95\x14\x2f\x7a\x4a\x25\xf5\x90\x6c\x8a\x14\xed\xb6\x40\x7a\xe9\x29\x98\x90\x23\x7b\x12\x8a\x14\x48\x46\x89\x57\xf0\x7f\x2f\x44\x59\x8e\x2d\x69\xb7\x0b\xd4\x87\xe8\xeb\xcd\x9b\x37\x6f\x86\x64\xf2\x77\xd7\x7f\x5e\xfd\xfd\xcf\x5f\x9f\x60\x1b\x6a\x5d\xae\xf2\xe1\xb2\xca\xb7\x84\xaa\x5c\x01\xe4\xef\x92\xe4\xb6\x6e\xac\x0b\xf0\xab\xb5\x1b\x4d\x70\x2b\xad\x81\x1b\x6b\x42\x92\x44\x80\x66\xf3\x04\x5b\x47\x55\x21\xb6\x21\x34\xfe\x32\xcb\x2a\x6b\x82\x4f\x37\x11\x8f\x0d\xfb\x54\xda\x3a\x63\x69\xcd\x2f\x15\xd6\xac\x77\xc5\x1f\x18\xc8\x31\xea\x1f\x7a\x32\x2f\xc0\x91\x2e\x84\x0f\x3b\x4d\x7e\x4b\x14\xc4\x98\x19\xae\x6c\xdd\xb0\x26\x05\x68\x14\xd4\x6c\xb8\x62\x52\x70\x75\x77\x07\xa7\xd9\xa7\xe1\x13\x39\x52\x99\x47\x9f\x4a\x6d\x9f\x55\xa5\xd1\x51\x94\x83\x8f\xf8\x9a\x69\x7e\xf0\x59\x7d\x10\xc3\x5f\x28\x5b\xa7\x17\xe9\x45\x26\xfd\xd9\xdb\xb4\x66\x93\x4a\xef\x45\xb9\xfa\xb6\xae\xdf\xb0\xc5\x3b\xe9\xb8\x09\xa3\x3c\x3f\x3c\x79\x27\xff\x87\x9c\xc7\xb9\x9a\x47\x2f\xca\x3c\x1b\xd8\x07\x55\x35\x05\x04\x83\x35\x15\xa2\x65\x7a\xe9\x3b\x26\x40\x5a\x13\xc8\x84\x42\xbc\xb0\x0a\xdb\x42\x51\xcb\x92\x92\xf8\xf0\x23\xb0\xe1\xc0\xa8\x13\x2f\x51\x53\xb1\x4e\x2f\x04\x64\x51\x74\xe0\xa0\xa9\xec\xba\xf4\x33\xd6\xb4\xdf\xe7\xd9\xf0\x62\x95\x67\xc3\x54\xac\xf2\x07\xab\x76\x11\x6a\xb0\xed\xaf\x00\xb9\xe2\x16\xa4\x46\xef\x0b\x61\xb0\x4d\x5e\x1c\x36\x0d\x39\x90\x3b\x34\xa0\x79\xb3\x0d\x64\x92\x8f\x02\x62\x97\x0a\xd1\xa0\x52\x6c\x36\x89\xa6\x2a\x5c\xc2\xfa\xa2\x79\xfd\x59\x0c\x44\xe7\x54\xd2\x6a\xf0\xeb\x8f\xc7\x6f\x00\x5d\xe7\xd0\x6c\x08\xde\x93\x86\xcb\x02\xd2\xcf\xd8\xee\xf7\xc7\xaf\x39\x1e\x7a\xdf\x75\xef\x49\xa7\xbf\xb3\x79\xda\xef\xc5\xc8\xf6\xe0\x08\x95\x74\xcf\xf5\xc3\x09\x61\x4f\xd9\x63\x87\x62\xdf\x98\x32\x3c\x4d\x4a\x46\x1d\x3f\xe6\x99\xe2\xb1\xec\xf1\x36\xcf\xa2\x15\xab\xa9\x7c\x13\x90\x0d\xb9\x43\xbe\xfc\x59\x9f\x54\xa6\x49\x06\xb6\xe6\xad\xf0\x67\xbd\x50\xa7\xb1\x8a\x62\xa5\x57\x43\x33\xfd\x89\xc8\xae\xe3\x6a\x40\xa4\xb7\xa6\xb2\xe9\xad\xbf\x66\xb7\x60\xc7\x87\xae\x1b\x50\x83\x21\x1f\xce\xab\x27\xed\x4f\x2b\x8f\x61\xca\xbe\x18\x6d\x51\x45\x27\xdf\x12\x0c\x26\x89\x09\xeb\xf5\x01\xbc\xc0\x3e\xf5\xee\x90\x40\xf3\xdc\x87\x84\x03\xd5\x80\x2d\x06\x74\xe2\x9c\x03\x20\x3f\x06\x8c\x4b\x21\xe9\x37\x14\x0f\x92\x9d\xd4\x04\x13\xf8\xa2\x31\xb0\xdf\x4f\x71\x1b\x47\x74\x32\x9f\x73\x9a\xc1\x9b\xe9\xfb\xf3\xa9\x5e\x88\xea\x2b\x9e\xd5\xf0\xdf\xfd\x1a\x7f\x95\xd5\x8a\xdc\x42\xf8\xac\x55\xc3\x8f\x8d\x27\x17\xee\x95\xe3\x96\xee\x2b\xd6\xb4\x14\x3a\xeb\x42\x3f\xb5\x3c\x33\xda\x37\x68\x46\xaf\xe3\xc2\x17\xe5\xc2\x08\xe4\x59\x8f\x9b\x06\x7f\x5f\x7d\x11\x65\x0e\xa3\x9d\x5e\xb3\xbb\xe3\x2f\x04\xc9\x7a\x2e\xaf\x29\xbb\x6e\x43\xe1\xc6\xba\x1a\x43\x20\x15\x81\x67\x61\xbd\x92\x66\x2e\x63\xd1\xa7\xbc\x19\xeb\x72\xa4\x92\x40\xaf\x01\xfa\x3f\x89\x42\xf7\x44\x26\xf9\x49\x94\x9f\xea\x26\xec\xe0\x26\xba\xbf\xcc\xbb\x60\xe2\x57\xb3\x7d\x5d\x7c\x34\xe7\x5b\xf2\x97\x7a\x75\x54\xbf\x71\xb4\x3b\x91\x3f\xce\xe1\xfa\xad\x51\x37\xd7\x18\x96\xb9\xbf\x73\x69\x8b\xe5\xa5\x7d\xdc\x49\x3d\x49\x6b\x14\xba\x5d\x72\x38\x62\x44\x99\xf3\x6c\xe8\x60\x79\xcd\x8a\x32\x1e\x7e\xf7\xa3\x90\x7e\x0a\xcf\xb6\xdb\x28\x34\xd3\x67\xb3\x39\x01\x4c\x77\xe4\x71\xeb\x1c\xef\x0e\x1b\x73\x9e\x0d\x47\x55\x7f\x76\xf5\xff\xd9\xfc\x1b\x00\x00\xff\xff\x9a\x14\x4e\x01\xf0\x08\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2288, mode: os.FileMode(436), modTime: time.Unix(1568163752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
