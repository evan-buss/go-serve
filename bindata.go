// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\x12\x0b\xec\xa1\x95\x14\x2f\x7a\xda\x4a\xea\x21\xde\x14\x29\xda\x6d\x81\xf4\xd2\x53\x30\x21\x47\xf6\x24\x14\x29\x90\x8c\x13\x47\xf0\x7f\x2f\x44\x59\xfe\x90\xb4\xbb\x05\xaa\x83\xf5\xc1\x99\x37\x6f\xde\x0c\x87\xce\xdf\xad\xfe\xbc\xfe\xfb\x9f\xbf\x3e\xc3\x26\xd4\xba\x5c\xe4\xfd\x6d\x91\x6f\x08\x55\xb9\x00\xc8\xdf\x25\xc9\x6d\xdd\x58\x17\xe0\x57\x6b\xd7\x9a\xe0\x56\x5a\x03\x37\xd6\x84\x24\x89\x06\x9a\xcd\x13\x6c\x1c\x55\x85\xd8\x84\xd0\xf8\x4f\x59\x56\x59\x13\x7c\xba\x8e\xf6\xd8\xb0\x4f\xa5\xad\x33\x96\xd6\xfc\x52\x61\xcd\x7a\x57\xfc\x81\x81\x1c\xa3\xfe\xa1\x03\xf3\x02\x1c\xe9\x42\xf8\xb0\xd3\xe4\x37\x44\x41\x0c\x91\xe1\xda\xd6\x0d\x6b\x52\x80\x46\x41\xcd\x86\x2b\x26\x05\xd7\x77\x77\x70\x1e\x7d\xec\x3e\xa2\x23\x95\x79\xf4\xa9\xd4\xf6\x59\x55\x1a\x1d\x45\x3a\xf8\x88\xaf\x99\xe6\x07\x9f\xd5\x07\x32\xfc\x46\xd9\x32\xbd\x4a\xaf\x32\xe9\x2f\xbe\xa6\x35\x9b\x54\x7a\x2f\xca\xc5\xb7\x79\xfd\x86\x5b\xbc\x93\x8e\x9b\x30\xd0\xf3\xfd\x9b\x77\xf2\x7f\xd0\x79\x9c\xb2\x79\xf4\xa2\xcc\xb3\x1e\xbd\x67\x55\x53\x40\x30\x58\x53\x21\xb6\x4c\x2f\x5d\xc5\x04\x48\x6b\x02\x99\x50\x88\x17\x56\x61\x53\x28\xda\xb2\xa4\x24\xbe\xfc\x08\x6c\x38\x30\xea\xc4\x4b\xd4\x54\x2c\xd3\x2b\x01\x59\x24\x1d\x38\x68\x2a\xdb\x36\xfd\x82\x35\xed\xf7\x79\xd6\x7f\x58\xe4\x59\xdf\x15\x8b\xfc\xc1\xaa\x5d\x34\x35\xb8\xed\xee\x00\xb9\xe2\x2d\x48\x8d\xde\x17\xc2\xe0\x36\x79\x71\xd8\x34\xe4\x40\xee\xd0\x80\xe6\xf5\x26\x90\x49\x3e\x0a\x88\x55\x2a\x44\x83\x4a\xb1\x59\x27\x9a\xaa\xf0\x09\x96\x57\xcd\xeb\xcf\xa2\x07\xba\x84\x92\x56\x83\x5f\x7e\x3c\xae\x01\xb4\xad\x43\xb3\x26\x78\x4f\x1a\x3e\x15\x90\x7e\xc1\xed\x7e\x7f\x5c\xcd\xf1\x50\xfb\xb6\x7d\x4f\x3a\xfd\x9d\xcd\xd3\x7e\x2f\x06\xb4\x07\x47\xa8\xa4\x7b\xae\x1f\xce\x00\x3b\xc8\xce\xb6\x4f\xf6\x84\x94\xe1\x79\x50\x32\xea\xb8\x98\x67\x8a\x87\xb4\x87\xc7\x3c\x8b\x52\x2c\xc6\xf4\x4d\x40\x36\xe4\x0e\xf1\xf2\x67\x7d\x96\x99\x26\x19\xd8\x9a\x53\xe2\xcf\x7a\x26\x4f\x63\x15\xc5\x4c\xaf\xfb\x62\xfa\x33\x92\x6d\xcb\x55\x6f\x91\xde\x9a\xca\xa6\xb7\x7e\xc5\x6e\x46\x8e\x0f\x6d\xdb\x5b\xf5\x82\x7c\xb8\xcc\x9e\xb4\x3f\xcf\x3c\xba\x29\xfb\x62\xb4\x45\x15\x95\x3c\x05\xe8\x45\x12\x23\xd4\xd5\xc1\x78\x06\x7d\xac\xdd\x21\x80\xe6\xa9\x0e\x09\x07\xaa\x01\xb7\x18\xd0\x89\x4b\x0c\x80\xfc\xe8\x30\x6c\x85\xa4\x1b\x28\x1e\x24\x3b\xa9\x09\x46\xe6\xb3\xc2\xc0\x7e\x3f\xb6\x5b\x3b\xa2\xb3\xfe\x9c\xc2\xf4\xda\x8c\xbf\x5f\x76\xf5\x8c\x57\x97\xf1\x24\x87\xef\xd7\x6b\xb8\x2a\xab\x15\xb9\x19\xf7\x49\xa9\xfa\x8b\x8d\x27\x17\xee\x95\xe3\x2d\xdd\x57\xac\x69\xce\x75\x52\x85\xae\x6b\x79\x22\xb4\x6f\xd0\x0c\x5a\xc7\x8d\x2f\xca\x99\x16\xc8\xb3\xce\x6e\xec\xfc\xdf\xf2\x8b\x56\xe6\xd0\xda\xe9\x8a\xdd\x1d\xbf\x11\x24\xcb\x29\xbd\xa6\x6c\xdb\x35\x85\x1b\xeb\x6a\x0c\x81\x54\x34\xbc\x70\xeb\x98\x34\x53\x1a\xb3\x3a\xe5\xcd\x90\x97\x23\x95\x04\x7a\x0d\xd0\xfd\x24\x0a\xdd\x13\x99\xe4\x27\x51\x7e\xae\x9b\xb0\x83\x9b\xa8\xfe\x3c\xee\x8c\x88\x5f\x8d\xf6\x75\xf2\x51\x9c\x6f\xd1\x9f\xab\xd5\x91\xfd\xda\xd1\xee\x8c\xfe\xd0\x87\xcb\x53\xa1\x6e\x56\x18\xe6\xb1\xbf\xb7\xb5\xd3\x37\x6e\xc4\x69\x86\xce\x6c\xef\xe3\x34\xf5\x24\xad\x51\xe8\x76\xc9\xe1\x98\x11\x65\xce\x93\xc6\x83\xf9\x7d\x2b\xca\x78\x00\xde\x0f\x64\xba\x4e\xbc\x18\xb9\x91\x6c\xa6\x2f\xfa\x73\x64\x30\x9e\xca\xc3\xf8\x1c\x9e\x0e\xc3\x39\xcf\xfa\xe3\xaa\x3b\xbf\xba\x7f\x37\xff\x06\x00\x00\xff\xff\x4e\xad\xc8\x16\xf4\x08\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2292, mode: os.FileMode(420), modTime: time.Unix(1571010542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
