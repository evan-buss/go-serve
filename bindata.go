// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xe3\x36\x10\xbd\x07\xc8\x7f\x98\x25\x16\xd8\x43\x2b\x29\x5e\xf4\x94\x4a\xee\x21\xd9\x14\x29\xda\x6d\x81\xf4\xd2\x53\x30\x21\x47\xf6\x24\x14\x29\x90\x8c\x13\x47\xf0\x7f\x2f\xf4\x69\xcb\x92\x77\x03\xf4\x52\x1d\x6c\x4a\x9c\x79\x33\xef\xcd\x68\xa8\xf4\xc3\xf5\x9f\x57\x7f\xff\xf3\xd7\x17\x58\x87\x42\x2f\xcf\xcf\xd2\xee\xbf\x5e\x11\xaa\xe5\xf9\x19\x40\xfa\x21\x8a\x6e\x8b\xd2\xba\x00\xbf\x5a\xbb\xd2\x04\xb7\xd2\x1a\xb8\xb1\x26\x44\x51\x6b\xa1\xd9\x3c\xc1\xda\x51\x9e\x89\x75\x08\xa5\xbf\x4c\x92\xdc\x9a\xe0\xe3\x55\xe3\x80\x25\xfb\x58\xda\x22\x61\x69\xcd\x2f\x39\x16\xac\xb7\xd9\x1f\x18\xc8\x31\xea\x1f\x6a\x34\x2f\xc0\x91\xce\x84\x0f\x5b\x4d\x7e\x4d\x14\xc4\x10\x1b\xae\x6c\x51\xb2\x26\x05\x68\x14\x14\x6c\x38\x67\x52\x70\x75\x77\x07\xa3\xf8\xc7\x00\x47\x09\x49\x65\x1e\x7d\x2c\xb5\x7d\x56\xb9\x46\x47\x4d\x42\xf8\x88\xaf\x89\xe6\x07\x9f\x14\x5d\x3a\xfc\x46\xc9\x22\xbe\x88\x2f\x12\xe9\x47\x4f\xe3\x82\x4d\x2c\xbd\x17\x8d\x3c\xdf\x4c\xed\x37\xdc\xe0\x9d\x74\x5c\x86\x21\x43\xdf\xde\x7a\x27\xff\x43\x46\x8f\xd3\x84\x1e\xbd\x58\xa6\x49\x8b\xde\x27\x56\x50\x40\x30\x58\x50\x26\x36\x4c\x2f\x75\xe5\x04\x48\x6b\x02\x99\x90\x89\x17\x56\x61\x9d\x29\xda\xb0\xa4\xa8\xb9\xf9\x11\xd8\x70\x60\xd4\x91\x97\xa8\x29\x5b\xc4\x17\x02\x92\x36\xef\xc0\x41\xd3\xb2\xaa\xe2\xaf\x58\xd0\x6e\x97\x26\xed\x83\xf3\xb3\x34\xe9\x1a\xe4\xfc\x2c\x7d\xb0\x6a\xdb\x9a\x1b\xdc\x34\x0b\x80\x54\xf1\x06\xa4\x46\xef\x33\x61\x70\x13\xbd\x38\x2c\x4b\x72\x20\xb7\x68\x40\xf3\x6a\x1d\xc8\x44\x9f\x05\x34\x05\xcb\x44\x89\x4a\xb1\x59\x45\x9a\xf2\x70\x09\x8b\x8b\xf2\xf5\x67\xd1\x21\x8d\xb1\xa4\xd5\xe0\x17\x9f\xf7\x9b\x00\x55\xe5\xd0\xac\x08\x3e\x92\x86\xcb\x0c\xe2\xaf\xb8\xd9\xed\xf6\xdb\x29\x76\x9d\x50\x55\x1f\x49\xc7\xbf\xb3\x79\xda\xed\x44\x8f\xf7\xe0\x08\x95\x74\xcf\xc5\xc3\x21\x64\x0d\x5a\x1b\xb7\xac\x0f\xb0\x12\x1c\x05\x26\xa3\xf6\xdb\x69\xa2\x78\xa0\x3f\xac\xd3\xa4\x15\xa5\x59\x8f\x88\x98\x80\x6c\xc8\xf5\x71\xd3\x67\x7d\x40\x52\x93\x0c\x6c\xcd\x81\x08\xcf\x7a\x8e\xb3\xb1\x8a\x1a\xd6\x57\x6d\x81\xfd\x61\xba\x55\xc5\x79\x6b\x12\xdf\x9a\xdc\xc6\xb7\xfe\x9a\xdd\x9c\x36\x9f\xaa\xaa\x35\x6b\xd5\xf9\x74\x24\x05\x69\x3f\x92\xa1\x71\x54\xf6\xc5\x68\x8b\xaa\x11\x76\x1f\xa3\x95\x4c\x1c\xe1\x5e\x77\xc6\x73\xf8\x13\x21\xbb\x10\x9a\xa7\x7a\x44\x1c\xa8\x00\xdc\x60\x40\x27\x8e\x50\x00\xd2\xc1\xa3\x7f\x4f\xa2\x7a\xe4\x78\x90\xec\xa4\x26\x38\xb6\x9f\xd5\x07\x76\xbb\x89\xe1\xca\x11\x1d\xb4\xed\x0c\x50\x2b\xd1\x64\x63\xdc\xee\x73\x7e\x35\xf1\x29\x93\x77\xd4\xae\xbf\x72\xab\x15\xb9\x39\x80\x69\xd9\xda\x8b\x8d\x27\x17\xee\x95\xe3\x0d\xdd\xe7\xac\x69\xd6\x79\x5a\x91\xba\x99\x79\x2a\xba\x2f\xd1\xf4\xba\x37\xe3\x41\x2c\x67\x3a\x22\x4d\x6a\xbb\x89\xf7\x3b\x69\x36\x66\xa6\xeb\xf7\xf8\x9a\xdd\x1d\xbf\x11\x44\x8b\x99\x14\xcb\x65\x55\xad\x28\xdc\x58\x57\x60\x08\xa4\x1a\xcb\x91\x5f\x9d\x4c\x39\x93\xc9\xbc\x5e\x69\xd9\x93\x73\xa4\xa2\x40\xaf\x01\xea\x9f\x48\xa1\x7b\x22\x13\xfd\x24\x96\x5f\x8a\x32\x6c\xe1\xa6\xa9\xc3\x09\xe4\x39\x31\x4f\x07\x3c\xcd\xa0\xd1\xe8\x9b\x1c\x66\xcb\x36\x50\x58\x39\xda\x1e\x70\xe8\x3b\x73\xb1\x2f\xd9\xcd\x35\x86\x93\xe8\xef\xaa\xd5\xf7\x66\x43\xfc\xc6\xa5\xd8\xcf\xe4\x99\xf9\x30\x4c\x67\x4f\xd2\x1a\x85\x6e\x1b\x75\xe7\xd7\xdc\x9b\x72\xea\xad\x17\xcb\xe6\x6c\xbd\xef\x93\x99\x6d\xde\xd1\x40\xff\x4e\x5d\xde\x37\xf3\xfe\xaf\x9c\x66\x26\x6c\xa2\xc7\xde\xc7\x9e\x93\x03\x6e\x38\x83\x86\x65\x7f\xd0\xa5\x49\xf7\x15\xd0\x7c\x1a\xd4\x5f\x91\xff\x06\x00\x00\xff\xff\xf5\x85\xdc\x3e\x5d\x0a\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2653, mode: os.FileMode(438), modTime: time.Unix(1572041841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
